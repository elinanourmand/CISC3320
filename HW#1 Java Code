/* This code shows how an operating system's pid manager works by initializing, allocating, and releasing a pid. 
* The pids are in a range of 300-5000 using the constant variables MIN_PID and MAX_PID. An array is used as the data structure here. 
* The pid manager initializes pids to 0 via the function allocate_map; it will return 1 after the function's completion.
* Then, it assigns a pid to a active process as its array value goes from 0 to 1 via the function allocate_pid; it will return the pid or -1 if all pids are in use.
* Lastly, the unique pid can only be assigned to one active process, so once it is done, the pid can be released and reset to 0 to be ready to be assigned to a new process via the function release_pid; it will have a void return type.
*/
import java.util.*;
import java.lang.*;
import java.io.*;

class PidManager{
	//main function
	public static void main (String[] args) throws java.lang.Exception{
	
	//if allocate_map is successful in initializing all pids to 0
        if (allocate_map()==1){
            System.out.println("Pids are initialized to 0.");
            int int_pid=allocate_pid(); // int_pid is assigned to value allocated by allocate_pid
	        if (int_pid==-1) // if int_pid is not allocated
                System.out.println("Error- all pids in use");
            else { // else int_pid is allocated
                System.out.println("Pid " + int_pid+ " has been allocated.");
                release_pid(int_pid); //int_pid is released and reset to 0
                System.out.println("Pid " + int_pid+ " has been been released.");
            }
        } 
        else // if allocate_map failed
	        System.out.println("Error-map allocation failed");
	}
	
	//global constant variables of max and min pids
	final static int MAX_PID=5000, MIN_PID=300;
	
	//global array pidValues with size 5000 
	static int [] pidValues= new int [MAX_PID];
	
	//allocate_map function has no parameters. 
	//It returns 1 after initalizing all pids to 0.
	public static int allocate_map() {
	    for (int i=MIN_PID; i<MAX_PID; i++){
	        pidValues[i]=0;
	    }
	   return 1;
	}
	
	//allocate_pid function has no parameters.
	//It returns 1 pid value that has been allocated from 0 to 1. 
	//Or, it returns -1 if all the pids are in use because they are all assigned to 1.
	public static int allocate_pid(){
	    for (int i=MIN_PID; i<MAX_PID; i++){
	        if (pidValues[i]==0){
	            pidValues[i]=1;
	            return i;
	        }
	    }
	    return -1;
	} 

    //release_pid function accepts int_pid as its parameter. 
    //It will release int_pid and reset the pid to 0
    //This function's return is void.
    public static void release_pid(int int_pid){
        pidValues[int_pid]=0;
        return;
    } 
}
